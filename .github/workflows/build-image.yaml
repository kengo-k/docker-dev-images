name: build docker image and push image to GHCR

on:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      changed_dockerfiles: ${{ steps.find_changed_dockerfiles.outputs.changed_dockerfiles }}
    
    steps:

    # 前回PUSHされた際のコミットを取得する
    - name: checkout before commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.before }}

    # 前回PUSHされたコミットから最新のコミットまでを取得する
    - name: fetch changed between before and latest
      run: |
        git fetch origin $GITHUB_SHA:refs/remotes/origin/main
        git checkout $GITHUB_SHA

    # 変更のあったすべてのDockerfileの一覧を取得する
    - name: find changed Dockerfiles
      id: find_changed_dockerfiles
      run: |
        echo "previous commit: ${{ github.event.before }}"
        echo "latest commit: ${{ github.sha }}"
        changed_dockerfiles=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep Dockerfile || true)
        echo $changed_dockerfiles
        echo "::set-output name=changed_dockerfiles::$changed_dockerfiles"

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.changed_dockerfiles != '' }}
    
    steps:

    # イメージのタグに付与する日付文字列を変数にセットしておく
    - name: set up environment variables
      run: |
        echo "DATE_TAG=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

    - name: set up docker
      uses: docker/setup-buildx-action@v1

    - name: login to ghcr
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: build and push
      run: |
        echo "prev output: ${{ needs.prepare.outputs.changed_dockerfiles }}"
        for dockerfile in ${{ needs.prepare.outputs.changed_dockerfiles }}; do
          taglist="ghcr.io/${{ github.actor }}/dev-base:${{ env.DATE_TAG }}-${GITHUB_SHA:0:7},ghcr.io/${{ github.actor }}/dev-base:latest"
          tags=$(echo "$taglist" | sed 's/^/-t /; s/,/ -t /g')
          echo "docker build $tags -f $dockerfile $(dirname $dockerfile)"
          pwd
          ls -la
          # docker build $tags -f $dockerfile $(dirname $dockerfile)

          # for tag in $(echo $tags | tr "," "\n"); do
          #   echo "image: $tag"
          #   echo "docker build -t $tag -f $dockerfile $(dirname $dockerfile)"
          #   #docker build -t $tag -f $dockerfile
          #   #docker push $tag
          # done
        done
